geom_line(data = DF_artif_select, aes(x = dist_km*LU_k_fact, y = Value,
color = cityname), size = 1.2) +
geom_line(data = artificial_cities_average, aes(x = dist_km, y = artif_av),
linetype = "dashed", col = "black", size = 1.2) +
scale_x_continuous(limit = c(0,55), breaks = c(0,10,20,30,40,50)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Artificial land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of artificial land use", color = "Legend:") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11))
})
output$graph10 <- renderPlot({
DF_artif_select <- DF_artif[DF_artif$cityname==input$villes1 | DF_artif$cityname==input$villes2, ]
ggplot() +
geom_line(data = DF_artif_select, aes(x = dist_km, y = Value, color = cityname), size = 1.2) +
geom_vline(xintercept = input$distance, col = "black", size = 0.9) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Artificial land use in 2006",
x = "Distance from City Hall (km)",
y = "Share of artificial land use", color = "Legend:") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11))
})
output$graph11 <- renderPlot({
DF_artif_select <- DF_artif[DF_artif$cityname==input$villes1 | DF_artif$cityname==input$villes2, ]
ggplot() +
geom_line(data = DF_artif_select, aes(x = dist_km*LU_k_fact, y = Value,
color = cityname), size = 1.2) +
geom_line(data = artificial_cities_average, aes(x = dist_km, y = artif_av),
linetype = "dashed", col = "darkorchid4", size = 1.2) +
geom_vline(xintercept = input$distance, col = "black", size = 0.9) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Artificial land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of artificial land use", color = "Legend:") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11))
})
output$graph12 <- renderPlot({
ggplot() +
geom_line(data = artif_cities_Rescaling, aes(x = dist_km, y = input$villes6),
col = "red", size = 1.2) +
geom_line(data = artificial_cities_average, aes(x = dist_km, y = artif_av),
linetype = "dashed", col = "black", size = 1.2) +
scale_x_continuous(limit = c(0,95), breaks = c(0,10,20,30,40,50,60,70,80,90)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Artificial land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of artificial land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11))
})
output$graph13 <- renderPlot({
ggplot(data = artif_EU_ES_FR_av) +
geom_line(aes(x = dist_km, y = Value, group = country, color = country, linetype = country),
size = 1.2) +
scale_color_manual(name = "Legend:", values = c("black","blue","red"),
guide = guide_legend(ncol = 3, nrow = 3, title.position = 'top',
title = "Legend:")) +
scale_linetype_manual(values = c("dashed", "solid", "solid")) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70,80)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Artificial land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of artificial land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)) +
guides(linetype = FALSE)
})
output$graph14 <- renderPlot({
DF_artif_select <- DF_artif[DF_artif$cityname==input$villes7 | DF_artif$cityname==input$villes8, ]
ggplot() +
geom_line(data = DF_artif_select, aes(x = dist_km*LU_k_fact, y = Value, color = cityname),
size = 1.2) +
geom_line(data = artificial_cities_average, aes(x = dist_km, y = artif_av, color = country,
linetype = "dashed"), size = 1.2) +
scale_color_manual(name = "Legend:", values = c("black","blue","red"),
guide = guide_legend(ncol = 3, nrow = 3, title.position = 'top',
title = "Legend:")) +
scale_linetype_manual(values = c("dashed", "solid", "solid")) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70,80)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Artificial land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of artificial land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)) + guides(linetype = FALSE)
})
output$graph15 <- renderPlot({
ggplot(data = housing_EU_ES_FR_av) +
geom_line(aes(x = dist_km, y = Value, group = country, color = country, linetype = country),
size = 1.2) +
scale_color_manual(name = "Legend:", values = c("black","blue","red"),
guide = guide_legend(ncol = 3, nrow = 3, title.position = 'top',
title = "Legend:")) +
scale_linetype_manual(values = c("dashed", "solid", "solid")) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70,80)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Urban fabric land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of urban fabric land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)) +
guides(linetype = FALSE)
})
output$graph16 <- renderPlot({
housing_artif_select <- housing_artif[housing_artif$cityname==input$villes9 |
housing_artif$cityname==input$villes10, ]
ggplot() +
geom_line(data = housing_artif_select, aes(x = dist_km, y = Value, color = cityname),
size = 1.2) +
geom_line(data = housing_average, aes(x = dist_km, y = housing_av, color = country,
linetype = "dashed"), size = 1.2) +
scale_color_manual(name = "Legend:", values = c("black","blue","red"),
guide = guide_legend(ncol = 3, nrow = 3, title.position = 'top',
title = "Legend:")) +
scale_linetype_manual(values = c("dashed", "solid", "solid")) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70,80)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Urban fabric land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of urban fabric land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)) + guides(linetype = FALSE)
})
output$graph17 <- renderPlot({
sub_housing_fr_es <- housing_city_av[which(housing_city_av$country=="fr"|
housing_city_av$country=="es"),]
attach(sub_housing_fr_es)
housing_fr_es <- sub_housing_fr_es[which(dist_km==10 | dist_km == 20 | dist_km == 30 |
dist_km == 40 | dist_km == 50 | dist_km == 60 |
dist_km == 70),]
detach(sub_housing_fr_es)
housing_fr_es$dist2 <- housing_fr_es$dist_km
housing_fr_es$dist2 <- str_replace_all(housing_fr_es$dist2, "10", "r' = 10km")
housing_fr_es$dist2 <- str_replace_all(housing_fr_es$dist2, "20", "r' = 20km")
housing_fr_es$dist2 <- str_replace_all(housing_fr_es$dist2, "30", "r' = 30km")
housing_fr_es$dist2 <- str_replace_all(housing_fr_es$dist2, "40", "r' = 40km")
housing_fr_es$dist2 <- str_replace_all(housing_fr_es$dist2, "50", "r' = 50km")
housing_fr_es$dist2 <- str_replace_all(housing_fr_es$dist2, "60", "r' = 60km")
housing_fr_es$dist2 <- str_replace_all(housing_fr_es$dist2, "70", "r' = 70km")
ggplot(data = housing_fr_es) +
geom_boxplot(aes(x = dist2, y = diff_av, fill = toupper(country)), position = position_dodge(1)) +
labs(title = "Urban fabric land use after rescaling in France and Spain, in 2006",
x = "Boxplots at various distance rescaled to the center", y = "", fill = "Legend:") +
scale_y_continuous(limits = c(-0.25,0.25)) +
scale_x_discrete(labels = c("", "", "", "")) +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
facet_grid(. ~ dist2, scales = "free", space = "free")
})
output$graph18 <- renderPlot({
ggplot(data = industries_EU_ES_FR_av) +
geom_line(aes(x = dist_km, y = Value, group = country, color = country, linetype = country),
size = 1.2) +
scale_color_manual(name = "Legend:", values = c("black","blue","red"),
guide = guide_legend(ncol = 3, nrow = 3, title.position = 'top',
title = "Legend:")) +
scale_linetype_manual(values = c("dashed", "solid", "solid")) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70,80)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Industries land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of industries land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)) +
guides(linetype = FALSE)
})
output$graph19 <- renderPlot({
industries_artif_select <- industries_artif[industries_artif$cityname==input$villes11 |
industries_artif$cityname==input$villes12, ]
ggplot() +
geom_line(data = industries_artif_select, aes(x = dist_km, y = Value,
color = cityname), size = 1.2) +
geom_line(data = industries_average, aes(x = dist_km, y = indus_av, color = country,
linetype = "dashed"), size = 1.2) +
scale_color_manual(name = "Legend:", values = c("black","blue","red"),
guide = guide_legend(ncol = 3, nrow = 3, title.position = 'top',
title = "Legend:")) +
scale_linetype_manual(values = c("dashed", "solid", "solid")) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70,80)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Industries land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of industries land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)) + guides(linetype = FALSE)
})
output$graph20 <- renderPlot({
sub_industries_fr_es <- industries_city_av[which(industries_city_av$country=="fr"|
industries_city_av$country=="es"),]
attach(sub_industries_fr_es)
industries_fr_es <- sub_industries_fr_es[which(dist_km == 10 | dist_km == 20 | dist_km == 30 |
dist_km == 40 | dist_km == 50 | dist_km == 60 |
dist_km == 70),]
detach(sub_industries_fr_es)
industries_fr_es$dist2 <- industries_fr_es$dist_km
industries_fr_es$dist2 <- str_replace_all(industries_fr_es$dist2, "10", "r' = 10km")
industries_fr_es$dist2 <- str_replace_all(industries_fr_es$dist2, "20", "r' = 20km")
industries_fr_es$dist2 <- str_replace_all(industries_fr_es$dist2, "30", "r' = 30km")
industries_fr_es$dist2 <- str_replace_all(industries_fr_es$dist2, "40", "r' = 40km")
industries_fr_es$dist2 <- str_replace_all(industries_fr_es$dist2, "50", "r' = 50km")
industries_fr_es$dist2 <- str_replace_all(industries_fr_es$dist2, "60", "r' = 60km")
industries_fr_es$dist2 <- str_replace_all(industries_fr_es$dist2, "70", "r' = 70km")
ggplot(data = industries_fr_es) +
geom_boxplot(aes(x = dist2, y = diff_av, fill = toupper(country)), position = position_dodge(1)) +
labs(title = "Industries land use after rescaling in France and Spain, in 2006",
x = "Boxplots at various distance rescaled to the center", y = "", fill = "Legend:") +
scale_y_continuous(limits = c(-0.25,0.25)) +
scale_x_discrete(labels = c("", "", "", "")) +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
facet_grid(. ~ dist2, scales = "free", space = "free")
})
output$graph21 <- renderPlot({
ggplot(data = roads_EU_ES_FR_av) +
geom_line(aes(x = dist_km, y = Value, group = country, color = country, linetype = country),
size = 1.2) +
scale_color_manual(name = "Legend:", values = c("black","blue","red"),
guide = guide_legend(ncol = 3, nrow = 3, title.position = 'top',
title = "Legend:")) +
scale_linetype_manual(values = c("dashed", "solid", "solid")) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70,80)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Roads land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of roads land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)) +
guides(linetype = FALSE)
})
output$graph22 <- renderPlot({
roads_artif_select <- roads_artif[roads_artif$cityname==input$villes13 |
roads_artif$cityname==input$villes14, ]
ggplot() +
geom_line(data = roads_artif_select, aes(x = dist_km, y = Value,
color = cityname), size = 1.2) +
geom_line(data = roads_average, aes(x = dist_km, y = artificial_av, color = country,
linetype = "dashed"), size = 1.2) +
scale_color_manual(name = "Legend:", values = c("black","blue","red"),
guide = guide_legend(ncol = 3, nrow = 3, title.position = 'top',
title = "Legend:")) +
scale_linetype_manual(values = c("dashed", "solid", "solid")) +
scale_x_continuous(limit = c(0,75), breaks = c(0,10,20,30,40,50,60,70,80)) +
scale_y_continuous(limit = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) +
labs(title = "Roads land use after rescaling in 2006",
x = "Rescaled distance from City Hall (km)",
y = "Share of roads land use") +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)) + guides(linetype = FALSE)
})
output$graph23 <- renderPlot({
sub_roads_fr_es <- roads_city_av[which(roads_city_av$country=="fr"|
roads_city_av$country=="es"),]
attach(sub_roads_fr_es)
roads_fr_es <- sub_roads_fr_es[which(dist_km == 10 | dist_km == 20 | dist_km == 30 |
dist_km == 40 | dist_km == 50 | dist_km == 60 |
dist_km == 70),]
detach(sub_roads_fr_es)
roads_fr_es$dist2 <- roads_fr_es$dist_km
roads_fr_es$dist2 <- str_replace_all(roads_fr_es$dist2, "10", "r' = 10km")
roads_fr_es$dist2 <- str_replace_all(roads_fr_es$dist2, "20", "r' = 20km")
roads_fr_es$dist2 <- str_replace_all(roads_fr_es$dist2, "30", "r' = 30km")
roads_fr_es$dist2 <- str_replace_all(roads_fr_es$dist2, "40", "r' = 40km")
roads_fr_es$dist2 <- str_replace_all(roads_fr_es$dist2, "50", "r' = 50km")
roads_fr_es$dist2 <- str_replace_all(roads_fr_es$dist2, "60", "r' = 60km")
roads_fr_es$dist2 <- str_replace_all(roads_fr_es$dist2, "70", "r' = 70km")
ggplot(data = roads_fr_es) +
geom_boxplot(aes(x = dist2, y = diff_av, fill = toupper(country)), position = position_dodge(1)) +
labs(title = "Roads land use after rescaling in France and Spain, in 2006",
x = "Boxplots at various distance rescaled to the center", y = "", fill = "Legend:") +
scale_y_continuous(limits = c(-0.25,0.25)) +
scale_x_discrete(labels = c("", "", "", "")) +
theme_bw() + theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
facet_grid(. ~ dist2, scales = "free", space = "free")
})
output$map_1 <- renderPlot({
DisplayBuffer <- function(table, town, buffer){
# Traitement de la donnée
city_tab <- table[table$cityname==town,]
city_tab <- st_as_sf(city_tab, coords = c("X", "Y"), crs = 4326) %>%
st_transform(3035) %>%
st_buffer(buffer) %>%
st_transform(4326)
# Extension spatiale
LAT1 = st_bbox(city_tab)[2] ; LAT2 = st_bbox(city_tab)[4]
LON1 = st_bbox(city_tab)[1] ; LON2 = st_bbox(city_tab)[3]
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), type = 'osm')
mytheme <- theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_text(angle = 90, vjust = 2),
axis.title.x = element_text(vjust = -0.2))
# Afficher la carte
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
print(autoplot(map.latlon) +
geom_sf(data = city_tab, inherit.aes = FALSE, alpha = 0, size = 1) +
labs(title = "PARIS \n Radius = 29,23 km",
x = "Longitude", y = "Latitude") + mytheme +
scalebar(city_tab, location = "bottomleft", dist = round((((30)/(1.026347))*0.5), 0),
dist_unit = "km", height = 0.013, transform = TRUE,
model = "WGS84", st.bottom = FALSE))
}
DisplayBuffer(centre_ville2, "Paris", 30000/1.026347)
})
output$map_2 <- renderPlot({
DisplayBuffer <- function(table, town, buffer){
city_tab <- table[table$cityname==town,]
city_tab <- st_as_sf(city_tab, coords = c("X", "Y"), crs = 4326) %>%
st_transform(3035) %>%
st_buffer(buffer) %>%
st_transform(4326)
LAT1 = st_bbox(city_tab)[2] ; LAT2 = st_bbox(city_tab)[4]
LON1 = st_bbox(city_tab)[1] ; LON2 = st_bbox(city_tab)[3]
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), type = 'osm')
mytheme <- theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_text(angle = 90, vjust = 2),
axis.title.x = element_text(vjust = -0.2))
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
print(autoplot(map.latlon) +
geom_sf(data = city_tab, inherit.aes = FALSE, alpha = 0, size = 1) +
labs(title = "MADRID \n Radius = 21,11 km",
x = "Longitude", y = "Latitude") + mytheme +
scalebar(city_tab, location = "bottomleft", dist = round((((30)/(1.421352))*0.5), 0),
dist_unit = "km", height = 0.013, transform = TRUE,
model = "WGS84", st.bottom = FALSE))
}
DisplayBuffer(centre_ville2, "Madrid", 30000/1.421352)
})
output$map_3 <- renderPlot({
DisplayBuffer <- function(table, town, buffer){
city_tab <- table[table$cityname==town,]
city_tab <- st_as_sf(city_tab, coords = c("X", "Y"), crs = 4326) %>%
st_transform(3035) %>%
st_buffer(buffer) %>%
st_transform(4326)
LAT1 = st_bbox(city_tab)[2] ; LAT2 = st_bbox(city_tab)[4]
LON1 = st_bbox(city_tab)[1] ; LON2 = st_bbox(city_tab)[3]
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), type = 'osm')
mytheme <- theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_text(angle = 90, vjust = 2),
axis.title.x = element_text(vjust = -0.2))
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
print(autoplot(map.latlon) +
geom_sf(data = city_tab, inherit.aes = FALSE, alpha = 0, size = 1) +
labs(title = "BUCAREST \n Radius = 12,62 km",
x = "Longitude", y = "Latitude") + mytheme +
scalebar(city_tab, location = "bottomleft", dist = round((((30)/(2.377028))*0.5), 0),
dist_unit = "km", height = 0.013, transform = TRUE,
model = "WGS84", st.bottom = FALSE))
}
DisplayBuffer(centre_ville2, "Bucuresti", 30000/2.377028)
})
output$map_4 <- renderPlot({
DisplayBuffer <- function(table, town, buffer){
city_tab <- table[table$cityname==town,]
city_tab <- st_as_sf(city_tab, coords = c("X", "Y"), crs = 4326) %>%
st_transform(3035) %>%
st_buffer(buffer) %>%
st_transform(4326)
LAT1 = st_bbox(city_tab)[2] ; LAT2 = st_bbox(city_tab)[4]
LON1 = st_bbox(city_tab)[1] ; LON2 = st_bbox(city_tab)[3]
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), type = 'osm')
mytheme <- theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_text(angle = 90, vjust = 2),
axis.title.x = element_text(vjust = -0.2))
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
print(autoplot(map.latlon) +
geom_sf(data = city_tab, inherit.aes = FALSE, alpha = 0, size = 1) +
labs(title = "INNSBRUCK \n Radius = 4,54 km",
x = "Longitude", y = "Latitude") + mytheme +
scalebar(city_tab, location = "bottomleft", dist = round((((30)/(6.608141))*0.5), 0),
dist_unit = "km", height = 0.013, transform = TRUE,
model = "WGS84", st.bottom = FALSE))
}
DisplayBuffer(centre_ville2, "Innsbruck", 30000/6.608141)
})
output$map_5 <- renderPlot({
DisplayBuffer <- function(table, town, buffer){
city_tab <- table[table$cityname==town,]
city_tab <- st_as_sf(city_tab, coords = c("X", "Y"), crs = 4326) %>%
st_transform(3035) %>%
st_buffer(buffer) %>%
st_transform(4326)
LAT1 = st_bbox(city_tab)[2] ; LAT2 = st_bbox(city_tab)[4]
LON1 = st_bbox(city_tab)[1] ; LON2 = st_bbox(city_tab)[3]
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), type = 'osm')
mytheme <- theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_text(angle = 90, vjust = 2),
axis.title.x = element_text(vjust = -0.2))
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
print(autoplot(map.latlon) +
geom_sf(data = city_tab, inherit.aes = FALSE, alpha = 0, size = 1) +
labs(x = "Longitude", y = "Latitude") + mytheme +
scalebar(city_tab, location = "bottomleft",
dist = round((((input$distance)/as.numeric(centre_ville2[centre_ville2$cityname==input$villes1,'LU_k_fact']))*0.5), 0),
dist_unit = "km", height = 0.013, transform = TRUE,
model = "WGS84", st.bottom = FALSE))
}
DisplayBuffer(centre_ville2, input$villes1, (input$distance*1000)/(as.numeric(centre_ville2[centre_ville2$cityname==input$villes1,'LU_k_fact'])))
})
output$map_6 <- renderPlot({
DisplayBuffer <- function(table, town, buffer){
city_tab <- table[table$cityname==town,]
city_tab <- st_as_sf(city_tab, coords = c("X", "Y"), crs = 4326) %>%
st_transform(3035) %>%
st_buffer(buffer) %>%
st_transform(4326)
LAT1 = st_bbox(city_tab)[2] ; LAT2 = st_bbox(city_tab)[4]
LON1 = st_bbox(city_tab)[1] ; LON2 = st_bbox(city_tab)[3]
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), type = 'osm')
mytheme <- theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_text(angle = 90, vjust = 2),
axis.title.x = element_text(vjust = -0.2))
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
print(autoplot(map.latlon) +
geom_sf(data = city_tab, inherit.aes = FALSE, alpha = 0, size = 1) +
labs(x = "Longitude", y = "Latitude") + mytheme +
scalebar(city_tab, location = "bottomleft",
dist = round((((input$distance)/as.numeric(centre_ville2[centre_ville2$cityname==input$villes2,'LU_k_fact']))*0.5), 0),
dist_unit = "km", height = 0.013, transform = TRUE,
model = "WGS84", st.bottom = FALSE))
}
DisplayBuffer(centre_ville2, input$villes2, (input$distance*1000)/(as.numeric(centre_ville2[centre_ville2$cityname==input$villes2,'LU_k_fact'])))
})
pal <- colorNumeric("Reds", domain = Disque_artif$Value, reverse = F)
output$mapLeaflet <- renderLeaflet({
Disque_artif_select <- Disque_artif[Disque_artif$dist_km == input$disque,]
Dist_toPlot <- as.numeric(input$disque)
Disque_artif$label <- paste0("<b>", Disque_artif$cityname, "</b><br>",
"Scaling factor: ", "<b>",
round(Disque_artif$LU_k_fact, 3), "</b><br>",
"Equivalent to a disk of radius: ", "<b>",
round(Dist_toPlot/Disque_artif$LU_k_fact, 2), "</b>", " km", "<br>",
"Share of artificial land use: ", "<b>",
round(Disque_artif$Value[Disque_artif$dist_km==Dist_toPlot], 3), "</b>")
leaflet() %>%
addPolygons(data = EPCI_2020, color = "blue", fillOpacity = 0.1, weight = 2,
group = "EPCI 2020", label = ~NOM_EPCI) %>%
addPolygons(data = FUA_2014, color = "black", fillOpacity = 0.1, weight = 2,
group = "FUA 2014", label = ~URAU_NAME) %>%
addCircles(data = town_hall, lng = ~X, lat = ~Y, color = "black", fillOpacity = 0.67) %>%
addCircles(data = Disque_artif_select, lng = ~X, lat = ~Y,
radius = ~(as.numeric(input$disque)*1000)/(LU_k_fact),
weight = 1, color = ~pal(Value), fillOpacity = 0.04,
label = ~cityname, popup = Disque_artif$label) %>%
addLegend(position = "topleft", values = Disque_artif_select$Value, pal = pal,
bins = 5, title = "Artificial land use") %>%
addScaleBar(position = "bottomright", options = scaleBarOptions(metric = TRUE, imperial = F)) %>%
addProviderTiles(provider = providers$Esri.WorldImagery, group = "Satellite") %>%
addProviderTiles(provider = providers$NASAGIBS.ViirsEarthAtNight2012, group = "Luminosity in 2012") %>%
addLayersControl(baseGroups = c("Luminosity in 2012", "Satellite"),
overlayGroups = c("EPCI 2020", "FUA 2014"))
})
output$mapLeaflet2 <- renderLeaflet({
town_hall_select <- town_hall[town_hall$cityfile==input$villes6,]
myListSimil <- c()
myListSimil <- myTabCor[,input$villes6]
myListSimil <- myListSimil[myListSimil >= as.numeric(input$correlation[1]) &
myListSimil <= as.numeric(input$correlation[2])]
myListSimil <- c(names(myListSimil))
myListSimil <- na.omit(myListSimil)
myListSimil <- town_hall[town_hall$cityfile %in% myListSimil,]
# town_hall_select$label <- paste0("<b>", town_hall$cityname, "</b><br>",
#                                  "Population : ", "<b>",
#                                  format(round(town_hall$totpop, 0), big.mark = " "), "</b>",
#                                  " habitants.", "<br>",
#                                  "Facteur de mise à l'échelle : ", "<b>",
#                                  round(town_hall$LU_k_fact, 3), "</b>")
#
# myListSimil$label <- paste0("<b>", town_hall$cityname, "</b><br>",
#                             "Population : ", "<b>",
#                             format(round(town_hall$totpop, 0), big.mark = " "), "</b>",
#                             " habitants.", "<br>",
#                             "Facteur de mise à l'échelle : ", "<b>",
#                             round(town_hall$LU_k_fact, 3), "</b>")
leaflet() %>%
addCircles(data = town_hall_select, lng = ~X, lat = ~Y, color = "red",
radius = 50, weight = 11, label = ~cityname) %>%
# popup = ~label) %>%
addCircles(data = myListSimil, lng = ~X, lat = ~Y, color = "#3300CC",
radius = 30, weight = 7, label = ~cityname) %>%
# popup = ~label) %>%
addScaleBar(position = "bottomright", options = scaleBarOptions(metric = T, imperial = F)) %>%
addProviderTiles(provider = providers$Esri.WorldStreetMap)
})
}
shinyApp(ui = ui, server = server)
runApp()
